// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nodes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nodes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nodes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nodes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nodes_2eproto;
namespace kim {
class addr_info;
struct addr_infoDefaultTypeInternal;
extern addr_infoDefaultTypeInternal _addr_info_default_instance_;
class node_info;
struct node_infoDefaultTypeInternal;
extern node_infoDefaultTypeInternal _node_info_default_instance_;
}  // namespace kim
PROTOBUF_NAMESPACE_OPEN
template<> ::kim::addr_info* Arena::CreateMaybeMessage<::kim::addr_info>(Arena*);
template<> ::kim::node_info* Arena::CreateMaybeMessage<::kim::node_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kim {

// ===================================================================

class addr_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kim.addr_info) */ {
 public:
  inline addr_info() : addr_info(nullptr) {}
  ~addr_info() override;
  explicit PROTOBUF_CONSTEXPR addr_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addr_info(const addr_info& from);
  addr_info(addr_info&& from) noexcept
    : addr_info() {
    *this = ::std::move(from);
  }

  inline addr_info& operator=(const addr_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline addr_info& operator=(addr_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addr_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const addr_info* internal_default_instance() {
    return reinterpret_cast<const addr_info*>(
               &_addr_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(addr_info& a, addr_info& b) {
    a.Swap(&b);
  }
  inline void Swap(addr_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addr_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addr_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addr_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addr_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addr_info& from) {
    addr_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addr_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kim.addr_info";
  }
  protected:
  explicit addr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindFieldNumber = 1,
    kGateBindFieldNumber = 3,
    kPortFieldNumber = 2,
    kGatePortFieldNumber = 4,
  };
  // string bind = 1;
  void clear_bind();
  const std::string& bind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bind();
  PROTOBUF_NODISCARD std::string* release_bind();
  void set_allocated_bind(std::string* bind);
  private:
  const std::string& _internal_bind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bind(const std::string& value);
  std::string* _internal_mutable_bind();
  public:

  // string gate_bind = 3;
  void clear_gate_bind();
  const std::string& gate_bind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gate_bind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gate_bind();
  PROTOBUF_NODISCARD std::string* release_gate_bind();
  void set_allocated_gate_bind(std::string* gate_bind);
  private:
  const std::string& _internal_gate_bind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gate_bind(const std::string& value);
  std::string* _internal_mutable_gate_bind();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 gate_port = 4;
  void clear_gate_port();
  uint32_t gate_port() const;
  void set_gate_port(uint32_t value);
  private:
  uint32_t _internal_gate_port() const;
  void _internal_set_gate_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kim.addr_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bind_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gate_bind_;
    uint32_t port_;
    uint32_t gate_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nodes_2eproto;
};
// -------------------------------------------------------------------

class node_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kim.node_info) */ {
 public:
  inline node_info() : node_info(nullptr) {}
  ~node_info() override;
  explicit PROTOBUF_CONSTEXPR node_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  node_info(const node_info& from);
  node_info(node_info&& from) noexcept
    : node_info() {
    *this = ::std::move(from);
  }

  inline node_info& operator=(const node_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_info& operator=(node_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_info* internal_default_instance() {
    return reinterpret_cast<const node_info*>(
               &_node_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(node_info& a, node_info& b) {
    a.Swap(&b);
  }
  inline void Swap(node_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<node_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const node_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const node_info& from) {
    node_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(node_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kim.node_info";
  }
  protected:
  explicit node_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNodeTypeFieldNumber = 3,
    kConfPathFieldNumber = 4,
    kWorkPathFieldNumber = 5,
    kAddrInfoFieldNumber = 2,
    kWorkerCntFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string node_type = 3;
  void clear_node_type();
  const std::string& node_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_type();
  PROTOBUF_NODISCARD std::string* release_node_type();
  void set_allocated_node_type(std::string* node_type);
  private:
  const std::string& _internal_node_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_type(const std::string& value);
  std::string* _internal_mutable_node_type();
  public:

  // string conf_path = 4;
  void clear_conf_path();
  const std::string& conf_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conf_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conf_path();
  PROTOBUF_NODISCARD std::string* release_conf_path();
  void set_allocated_conf_path(std::string* conf_path);
  private:
  const std::string& _internal_conf_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conf_path(const std::string& value);
  std::string* _internal_mutable_conf_path();
  public:

  // string work_path = 5;
  void clear_work_path();
  const std::string& work_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_work_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_work_path();
  PROTOBUF_NODISCARD std::string* release_work_path();
  void set_allocated_work_path(std::string* work_path);
  private:
  const std::string& _internal_work_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_work_path(const std::string& value);
  std::string* _internal_mutable_work_path();
  public:

  // .kim.addr_info addr_info = 2;
  bool has_addr_info() const;
  private:
  bool _internal_has_addr_info() const;
  public:
  void clear_addr_info();
  const ::kim::addr_info& addr_info() const;
  PROTOBUF_NODISCARD ::kim::addr_info* release_addr_info();
  ::kim::addr_info* mutable_addr_info();
  void set_allocated_addr_info(::kim::addr_info* addr_info);
  private:
  const ::kim::addr_info& _internal_addr_info() const;
  ::kim::addr_info* _internal_mutable_addr_info();
  public:
  void unsafe_arena_set_allocated_addr_info(
      ::kim::addr_info* addr_info);
  ::kim::addr_info* unsafe_arena_release_addr_info();

  // int32 worker_cnt = 6;
  void clear_worker_cnt();
  int32_t worker_cnt() const;
  void set_worker_cnt(int32_t value);
  private:
  int32_t _internal_worker_cnt() const;
  void _internal_set_worker_cnt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kim.node_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conf_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_path_;
    ::kim::addr_info* addr_info_;
    int32_t worker_cnt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nodes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// addr_info

// string bind = 1;
inline void addr_info::clear_bind() {
  _impl_.bind_.ClearToEmpty();
}
inline const std::string& addr_info::bind() const {
  // @@protoc_insertion_point(field_get:kim.addr_info.bind)
  return _internal_bind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addr_info::set_bind(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.addr_info.bind)
}
inline std::string* addr_info::mutable_bind() {
  std::string* _s = _internal_mutable_bind();
  // @@protoc_insertion_point(field_mutable:kim.addr_info.bind)
  return _s;
}
inline const std::string& addr_info::_internal_bind() const {
  return _impl_.bind_.Get();
}
inline void addr_info::_internal_set_bind(const std::string& value) {
  
  _impl_.bind_.Set(value, GetArenaForAllocation());
}
inline std::string* addr_info::_internal_mutable_bind() {
  
  return _impl_.bind_.Mutable(GetArenaForAllocation());
}
inline std::string* addr_info::release_bind() {
  // @@protoc_insertion_point(field_release:kim.addr_info.bind)
  return _impl_.bind_.Release();
}
inline void addr_info::set_allocated_bind(std::string* bind) {
  if (bind != nullptr) {
    
  } else {
    
  }
  _impl_.bind_.SetAllocated(bind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bind_.IsDefault()) {
    _impl_.bind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.addr_info.bind)
}

// uint32 port = 2;
inline void addr_info::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t addr_info::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t addr_info::port() const {
  // @@protoc_insertion_point(field_get:kim.addr_info.port)
  return _internal_port();
}
inline void addr_info::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void addr_info::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kim.addr_info.port)
}

// string gate_bind = 3;
inline void addr_info::clear_gate_bind() {
  _impl_.gate_bind_.ClearToEmpty();
}
inline const std::string& addr_info::gate_bind() const {
  // @@protoc_insertion_point(field_get:kim.addr_info.gate_bind)
  return _internal_gate_bind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addr_info::set_gate_bind(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gate_bind_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.addr_info.gate_bind)
}
inline std::string* addr_info::mutable_gate_bind() {
  std::string* _s = _internal_mutable_gate_bind();
  // @@protoc_insertion_point(field_mutable:kim.addr_info.gate_bind)
  return _s;
}
inline const std::string& addr_info::_internal_gate_bind() const {
  return _impl_.gate_bind_.Get();
}
inline void addr_info::_internal_set_gate_bind(const std::string& value) {
  
  _impl_.gate_bind_.Set(value, GetArenaForAllocation());
}
inline std::string* addr_info::_internal_mutable_gate_bind() {
  
  return _impl_.gate_bind_.Mutable(GetArenaForAllocation());
}
inline std::string* addr_info::release_gate_bind() {
  // @@protoc_insertion_point(field_release:kim.addr_info.gate_bind)
  return _impl_.gate_bind_.Release();
}
inline void addr_info::set_allocated_gate_bind(std::string* gate_bind) {
  if (gate_bind != nullptr) {
    
  } else {
    
  }
  _impl_.gate_bind_.SetAllocated(gate_bind, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gate_bind_.IsDefault()) {
    _impl_.gate_bind_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.addr_info.gate_bind)
}

// uint32 gate_port = 4;
inline void addr_info::clear_gate_port() {
  _impl_.gate_port_ = 0u;
}
inline uint32_t addr_info::_internal_gate_port() const {
  return _impl_.gate_port_;
}
inline uint32_t addr_info::gate_port() const {
  // @@protoc_insertion_point(field_get:kim.addr_info.gate_port)
  return _internal_gate_port();
}
inline void addr_info::_internal_set_gate_port(uint32_t value) {
  
  _impl_.gate_port_ = value;
}
inline void addr_info::set_gate_port(uint32_t value) {
  _internal_set_gate_port(value);
  // @@protoc_insertion_point(field_set:kim.addr_info.gate_port)
}

// -------------------------------------------------------------------

// node_info

// string name = 1;
inline void node_info::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& node_info::name() const {
  // @@protoc_insertion_point(field_get:kim.node_info.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void node_info::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.node_info.name)
}
inline std::string* node_info::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kim.node_info.name)
  return _s;
}
inline const std::string& node_info::_internal_name() const {
  return _impl_.name_.Get();
}
inline void node_info::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* node_info::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* node_info::release_name() {
  // @@protoc_insertion_point(field_release:kim.node_info.name)
  return _impl_.name_.Release();
}
inline void node_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.node_info.name)
}

// .kim.addr_info addr_info = 2;
inline bool node_info::_internal_has_addr_info() const {
  return this != internal_default_instance() && _impl_.addr_info_ != nullptr;
}
inline bool node_info::has_addr_info() const {
  return _internal_has_addr_info();
}
inline void node_info::clear_addr_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.addr_info_ != nullptr) {
    delete _impl_.addr_info_;
  }
  _impl_.addr_info_ = nullptr;
}
inline const ::kim::addr_info& node_info::_internal_addr_info() const {
  const ::kim::addr_info* p = _impl_.addr_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::kim::addr_info&>(
      ::kim::_addr_info_default_instance_);
}
inline const ::kim::addr_info& node_info::addr_info() const {
  // @@protoc_insertion_point(field_get:kim.node_info.addr_info)
  return _internal_addr_info();
}
inline void node_info::unsafe_arena_set_allocated_addr_info(
    ::kim::addr_info* addr_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addr_info_);
  }
  _impl_.addr_info_ = addr_info;
  if (addr_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kim.node_info.addr_info)
}
inline ::kim::addr_info* node_info::release_addr_info() {
  
  ::kim::addr_info* temp = _impl_.addr_info_;
  _impl_.addr_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kim::addr_info* node_info::unsafe_arena_release_addr_info() {
  // @@protoc_insertion_point(field_release:kim.node_info.addr_info)
  
  ::kim::addr_info* temp = _impl_.addr_info_;
  _impl_.addr_info_ = nullptr;
  return temp;
}
inline ::kim::addr_info* node_info::_internal_mutable_addr_info() {
  
  if (_impl_.addr_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::kim::addr_info>(GetArenaForAllocation());
    _impl_.addr_info_ = p;
  }
  return _impl_.addr_info_;
}
inline ::kim::addr_info* node_info::mutable_addr_info() {
  ::kim::addr_info* _msg = _internal_mutable_addr_info();
  // @@protoc_insertion_point(field_mutable:kim.node_info.addr_info)
  return _msg;
}
inline void node_info::set_allocated_addr_info(::kim::addr_info* addr_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.addr_info_;
  }
  if (addr_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addr_info);
    if (message_arena != submessage_arena) {
      addr_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addr_info_ = addr_info;
  // @@protoc_insertion_point(field_set_allocated:kim.node_info.addr_info)
}

// string node_type = 3;
inline void node_info::clear_node_type() {
  _impl_.node_type_.ClearToEmpty();
}
inline const std::string& node_info::node_type() const {
  // @@protoc_insertion_point(field_get:kim.node_info.node_type)
  return _internal_node_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void node_info::set_node_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.node_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.node_info.node_type)
}
inline std::string* node_info::mutable_node_type() {
  std::string* _s = _internal_mutable_node_type();
  // @@protoc_insertion_point(field_mutable:kim.node_info.node_type)
  return _s;
}
inline const std::string& node_info::_internal_node_type() const {
  return _impl_.node_type_.Get();
}
inline void node_info::_internal_set_node_type(const std::string& value) {
  
  _impl_.node_type_.Set(value, GetArenaForAllocation());
}
inline std::string* node_info::_internal_mutable_node_type() {
  
  return _impl_.node_type_.Mutable(GetArenaForAllocation());
}
inline std::string* node_info::release_node_type() {
  // @@protoc_insertion_point(field_release:kim.node_info.node_type)
  return _impl_.node_type_.Release();
}
inline void node_info::set_allocated_node_type(std::string* node_type) {
  if (node_type != nullptr) {
    
  } else {
    
  }
  _impl_.node_type_.SetAllocated(node_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.node_type_.IsDefault()) {
    _impl_.node_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.node_info.node_type)
}

// string conf_path = 4;
inline void node_info::clear_conf_path() {
  _impl_.conf_path_.ClearToEmpty();
}
inline const std::string& node_info::conf_path() const {
  // @@protoc_insertion_point(field_get:kim.node_info.conf_path)
  return _internal_conf_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void node_info::set_conf_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conf_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.node_info.conf_path)
}
inline std::string* node_info::mutable_conf_path() {
  std::string* _s = _internal_mutable_conf_path();
  // @@protoc_insertion_point(field_mutable:kim.node_info.conf_path)
  return _s;
}
inline const std::string& node_info::_internal_conf_path() const {
  return _impl_.conf_path_.Get();
}
inline void node_info::_internal_set_conf_path(const std::string& value) {
  
  _impl_.conf_path_.Set(value, GetArenaForAllocation());
}
inline std::string* node_info::_internal_mutable_conf_path() {
  
  return _impl_.conf_path_.Mutable(GetArenaForAllocation());
}
inline std::string* node_info::release_conf_path() {
  // @@protoc_insertion_point(field_release:kim.node_info.conf_path)
  return _impl_.conf_path_.Release();
}
inline void node_info::set_allocated_conf_path(std::string* conf_path) {
  if (conf_path != nullptr) {
    
  } else {
    
  }
  _impl_.conf_path_.SetAllocated(conf_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conf_path_.IsDefault()) {
    _impl_.conf_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.node_info.conf_path)
}

// string work_path = 5;
inline void node_info::clear_work_path() {
  _impl_.work_path_.ClearToEmpty();
}
inline const std::string& node_info::work_path() const {
  // @@protoc_insertion_point(field_get:kim.node_info.work_path)
  return _internal_work_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void node_info::set_work_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.work_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kim.node_info.work_path)
}
inline std::string* node_info::mutable_work_path() {
  std::string* _s = _internal_mutable_work_path();
  // @@protoc_insertion_point(field_mutable:kim.node_info.work_path)
  return _s;
}
inline const std::string& node_info::_internal_work_path() const {
  return _impl_.work_path_.Get();
}
inline void node_info::_internal_set_work_path(const std::string& value) {
  
  _impl_.work_path_.Set(value, GetArenaForAllocation());
}
inline std::string* node_info::_internal_mutable_work_path() {
  
  return _impl_.work_path_.Mutable(GetArenaForAllocation());
}
inline std::string* node_info::release_work_path() {
  // @@protoc_insertion_point(field_release:kim.node_info.work_path)
  return _impl_.work_path_.Release();
}
inline void node_info::set_allocated_work_path(std::string* work_path) {
  if (work_path != nullptr) {
    
  } else {
    
  }
  _impl_.work_path_.SetAllocated(work_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.work_path_.IsDefault()) {
    _impl_.work_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kim.node_info.work_path)
}

// int32 worker_cnt = 6;
inline void node_info::clear_worker_cnt() {
  _impl_.worker_cnt_ = 0;
}
inline int32_t node_info::_internal_worker_cnt() const {
  return _impl_.worker_cnt_;
}
inline int32_t node_info::worker_cnt() const {
  // @@protoc_insertion_point(field_get:kim.node_info.worker_cnt)
  return _internal_worker_cnt();
}
inline void node_info::_internal_set_worker_cnt(int32_t value) {
  
  _impl_.worker_cnt_ = value;
}
inline void node_info::set_worker_cnt(int32_t value) {
  _internal_set_worker_cnt(value);
  // @@protoc_insertion_point(field_set:kim.node_info.worker_cnt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kim

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nodes_2eproto
