// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2eproto;
class ModelData;
struct ModelDataDefaultTypeInternal;
extern ModelDataDefaultTypeInternal _ModelData_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Triangle;
struct TriangleDefaultTypeInternal;
extern TriangleDefaultTypeInternal _Triangle_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ModelData* Arena::CreateMaybeMessage<::ModelData>(Arena*);
template<> ::Point* Arena::CreateMaybeMessage<::Point>(Arena*);
template<> ::Triangle* Arena::CreateMaybeMessage<::Triangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Triangle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Triangle) */ {
 public:
  inline Triangle() : Triangle(nullptr) {}
  ~Triangle() override;
  explicit PROTOBUF_CONSTEXPR Triangle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Triangle(const Triangle& from);
  Triangle(Triangle&& from) noexcept
    : Triangle() {
    *this = ::std::move(from);
  }

  inline Triangle& operator=(const Triangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Triangle& operator=(Triangle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Triangle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Triangle* internal_default_instance() {
    return reinterpret_cast<const Triangle*>(
               &_Triangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Triangle& a, Triangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Triangle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Triangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Triangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Triangle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Triangle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Triangle& from) {
    Triangle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Triangle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Triangle";
  }
  protected:
  explicit Triangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP1FieldNumber = 1,
    kP2FieldNumber = 2,
    kP3FieldNumber = 3,
  };
  // .Point p1 = 1;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::Point& p1() const;
  PROTOBUF_NODISCARD ::Point* release_p1();
  ::Point* mutable_p1();
  void set_allocated_p1(::Point* p1);
  private:
  const ::Point& _internal_p1() const;
  ::Point* _internal_mutable_p1();
  public:
  void unsafe_arena_set_allocated_p1(
      ::Point* p1);
  ::Point* unsafe_arena_release_p1();

  // .Point p2 = 2;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  const ::Point& p2() const;
  PROTOBUF_NODISCARD ::Point* release_p2();
  ::Point* mutable_p2();
  void set_allocated_p2(::Point* p2);
  private:
  const ::Point& _internal_p2() const;
  ::Point* _internal_mutable_p2();
  public:
  void unsafe_arena_set_allocated_p2(
      ::Point* p2);
  ::Point* unsafe_arena_release_p2();

  // .Point p3 = 3;
  bool has_p3() const;
  private:
  bool _internal_has_p3() const;
  public:
  void clear_p3();
  const ::Point& p3() const;
  PROTOBUF_NODISCARD ::Point* release_p3();
  ::Point* mutable_p3();
  void set_allocated_p3(::Point* p3);
  private:
  const ::Point& _internal_p3() const;
  ::Point* _internal_mutable_p3();
  public:
  void unsafe_arena_set_allocated_p3(
      ::Point* p3);
  ::Point* unsafe_arena_release_p3();

  // @@protoc_insertion_point(class_scope:Triangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Point* p1_;
    ::Point* p2_;
    ::Point* p3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ModelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelData) */ {
 public:
  inline ModelData() : ModelData(nullptr) {}
  ~ModelData() override;
  explicit PROTOBUF_CONSTEXPR ModelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelData(const ModelData& from);
  ModelData(ModelData&& from) noexcept
    : ModelData() {
    *this = ::std::move(from);
  }

  inline ModelData& operator=(const ModelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelData& operator=(ModelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelData* internal_default_instance() {
    return reinterpret_cast<const ModelData*>(
               &_ModelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelData& a, ModelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModelData& from) {
    ModelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelData";
  }
  protected:
  explicit ModelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanesFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated .Triangle planes = 2;
  int planes_size() const;
  private:
  int _internal_planes_size() const;
  public:
  void clear_planes();
  ::Triangle* mutable_planes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triangle >*
      mutable_planes();
  private:
  const ::Triangle& _internal_planes(int index) const;
  ::Triangle* _internal_add_planes();
  public:
  const ::Triangle& planes(int index) const;
  ::Triangle* add_planes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triangle >&
      planes() const;

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ModelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triangle > planes_;
    int32_t ret_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Point.y)
}

// int32 z = 3;
inline void Point::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t Point::_internal_z() const {
  return _impl_.z_;
}
inline int32_t Point::z() const {
  // @@protoc_insertion_point(field_get:Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void Point::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Point.z)
}

// -------------------------------------------------------------------

// Triangle

// .Point p1 = 1;
inline bool Triangle::_internal_has_p1() const {
  return this != internal_default_instance() && _impl_.p1_ != nullptr;
}
inline bool Triangle::has_p1() const {
  return _internal_has_p1();
}
inline void Triangle::clear_p1() {
  if (GetArenaForAllocation() == nullptr && _impl_.p1_ != nullptr) {
    delete _impl_.p1_;
  }
  _impl_.p1_ = nullptr;
}
inline const ::Point& Triangle::_internal_p1() const {
  const ::Point* p = _impl_.p1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Triangle::p1() const {
  // @@protoc_insertion_point(field_get:Triangle.p1)
  return _internal_p1();
}
inline void Triangle::unsafe_arena_set_allocated_p1(
    ::Point* p1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p1_);
  }
  _impl_.p1_ = p1;
  if (p1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Triangle.p1)
}
inline ::Point* Triangle::release_p1() {
  
  ::Point* temp = _impl_.p1_;
  _impl_.p1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Triangle::unsafe_arena_release_p1() {
  // @@protoc_insertion_point(field_release:Triangle.p1)
  
  ::Point* temp = _impl_.p1_;
  _impl_.p1_ = nullptr;
  return temp;
}
inline ::Point* Triangle::_internal_mutable_p1() {
  
  if (_impl_.p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.p1_ = p;
  }
  return _impl_.p1_;
}
inline ::Point* Triangle::mutable_p1() {
  ::Point* _msg = _internal_mutable_p1();
  // @@protoc_insertion_point(field_mutable:Triangle.p1)
  return _msg;
}
inline void Triangle::set_allocated_p1(::Point* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p1);
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:Triangle.p1)
}

// .Point p2 = 2;
inline bool Triangle::_internal_has_p2() const {
  return this != internal_default_instance() && _impl_.p2_ != nullptr;
}
inline bool Triangle::has_p2() const {
  return _internal_has_p2();
}
inline void Triangle::clear_p2() {
  if (GetArenaForAllocation() == nullptr && _impl_.p2_ != nullptr) {
    delete _impl_.p2_;
  }
  _impl_.p2_ = nullptr;
}
inline const ::Point& Triangle::_internal_p2() const {
  const ::Point* p = _impl_.p2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Triangle::p2() const {
  // @@protoc_insertion_point(field_get:Triangle.p2)
  return _internal_p2();
}
inline void Triangle::unsafe_arena_set_allocated_p2(
    ::Point* p2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p2_);
  }
  _impl_.p2_ = p2;
  if (p2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Triangle.p2)
}
inline ::Point* Triangle::release_p2() {
  
  ::Point* temp = _impl_.p2_;
  _impl_.p2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Triangle::unsafe_arena_release_p2() {
  // @@protoc_insertion_point(field_release:Triangle.p2)
  
  ::Point* temp = _impl_.p2_;
  _impl_.p2_ = nullptr;
  return temp;
}
inline ::Point* Triangle::_internal_mutable_p2() {
  
  if (_impl_.p2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.p2_ = p;
  }
  return _impl_.p2_;
}
inline ::Point* Triangle::mutable_p2() {
  ::Point* _msg = _internal_mutable_p2();
  // @@protoc_insertion_point(field_mutable:Triangle.p2)
  return _msg;
}
inline void Triangle::set_allocated_p2(::Point* p2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p2_;
  }
  if (p2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p2);
    if (message_arena != submessage_arena) {
      p2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p2_ = p2;
  // @@protoc_insertion_point(field_set_allocated:Triangle.p2)
}

// .Point p3 = 3;
inline bool Triangle::_internal_has_p3() const {
  return this != internal_default_instance() && _impl_.p3_ != nullptr;
}
inline bool Triangle::has_p3() const {
  return _internal_has_p3();
}
inline void Triangle::clear_p3() {
  if (GetArenaForAllocation() == nullptr && _impl_.p3_ != nullptr) {
    delete _impl_.p3_;
  }
  _impl_.p3_ = nullptr;
}
inline const ::Point& Triangle::_internal_p3() const {
  const ::Point* p = _impl_.p3_;
  return p != nullptr ? *p : reinterpret_cast<const ::Point&>(
      ::_Point_default_instance_);
}
inline const ::Point& Triangle::p3() const {
  // @@protoc_insertion_point(field_get:Triangle.p3)
  return _internal_p3();
}
inline void Triangle::unsafe_arena_set_allocated_p3(
    ::Point* p3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p3_);
  }
  _impl_.p3_ = p3;
  if (p3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Triangle.p3)
}
inline ::Point* Triangle::release_p3() {
  
  ::Point* temp = _impl_.p3_;
  _impl_.p3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Point* Triangle::unsafe_arena_release_p3() {
  // @@protoc_insertion_point(field_release:Triangle.p3)
  
  ::Point* temp = _impl_.p3_;
  _impl_.p3_ = nullptr;
  return temp;
}
inline ::Point* Triangle::_internal_mutable_p3() {
  
  if (_impl_.p3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaForAllocation());
    _impl_.p3_ = p;
  }
  return _impl_.p3_;
}
inline ::Point* Triangle::mutable_p3() {
  ::Point* _msg = _internal_mutable_p3();
  // @@protoc_insertion_point(field_mutable:Triangle.p3)
  return _msg;
}
inline void Triangle::set_allocated_p3(::Point* p3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p3_;
  }
  if (p3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p3);
    if (message_arena != submessage_arena) {
      p3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p3_ = p3;
  // @@protoc_insertion_point(field_set_allocated:Triangle.p3)
}

// -------------------------------------------------------------------

// ModelData

// int32 ret = 1;
inline void ModelData::clear_ret() {
  _impl_.ret_ = 0;
}
inline int32_t ModelData::_internal_ret() const {
  return _impl_.ret_;
}
inline int32_t ModelData::ret() const {
  // @@protoc_insertion_point(field_get:ModelData.ret)
  return _internal_ret();
}
inline void ModelData::_internal_set_ret(int32_t value) {
  
  _impl_.ret_ = value;
}
inline void ModelData::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ModelData.ret)
}

// repeated .Triangle planes = 2;
inline int ModelData::_internal_planes_size() const {
  return _impl_.planes_.size();
}
inline int ModelData::planes_size() const {
  return _internal_planes_size();
}
inline void ModelData::clear_planes() {
  _impl_.planes_.Clear();
}
inline ::Triangle* ModelData::mutable_planes(int index) {
  // @@protoc_insertion_point(field_mutable:ModelData.planes)
  return _impl_.planes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triangle >*
ModelData::mutable_planes() {
  // @@protoc_insertion_point(field_mutable_list:ModelData.planes)
  return &_impl_.planes_;
}
inline const ::Triangle& ModelData::_internal_planes(int index) const {
  return _impl_.planes_.Get(index);
}
inline const ::Triangle& ModelData::planes(int index) const {
  // @@protoc_insertion_point(field_get:ModelData.planes)
  return _internal_planes(index);
}
inline ::Triangle* ModelData::_internal_add_planes() {
  return _impl_.planes_.Add();
}
inline ::Triangle* ModelData::add_planes() {
  ::Triangle* _add = _internal_add_planes();
  // @@protoc_insertion_point(field_add:ModelData.planes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triangle >&
ModelData::planes() const {
  // @@protoc_insertion_point(field_list:ModelData.planes)
  return _impl_.planes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
