// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fapi_2eproto;
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Addr;
class AddrDefaultTypeInternal;
extern AddrDefaultTypeInternal _Addr_default_instance_;
class Bank;
class BankDefaultTypeInternal;
extern BankDefaultTypeInternal _Bank_default_instance_;
class GetPersonReq;
class GetPersonReqDefaultTypeInternal;
extern GetPersonReqDefaultTypeInternal _GetPersonReq_default_instance_;
class GetPersonRsp;
class GetPersonRspDefaultTypeInternal;
extern GetPersonRspDefaultTypeInternal _GetPersonRsp_default_instance_;
class OptContext;
class OptContextDefaultTypeInternal;
extern OptContextDefaultTypeInternal _OptContext_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Account* Arena::CreateMaybeMessage<::Account>(Arena*);
template<> ::Addr* Arena::CreateMaybeMessage<::Addr>(Arena*);
template<> ::Bank* Arena::CreateMaybeMessage<::Bank>(Arena*);
template<> ::GetPersonReq* Arena::CreateMaybeMessage<::GetPersonReq>(Arena*);
template<> ::GetPersonRsp* Arena::CreateMaybeMessage<::GetPersonRsp>(Arena*);
template<> ::OptContext* Arena::CreateMaybeMessage<::OptContext>(Arena*);
template<> ::Person* Arena::CreateMaybeMessage<::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class OptContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptContext) */ {
 public:
  inline OptContext() : OptContext(nullptr) {};
  virtual ~OptContext();

  OptContext(const OptContext& from);
  OptContext(OptContext&& from) noexcept
    : OptContext() {
    *this = ::std::move(from);
  }

  inline OptContext& operator=(const OptContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptContext& operator=(OptContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptContext* internal_default_instance() {
    return reinterpret_cast<const OptContext*>(
               &_OptContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptContext& a, OptContext& b) {
    a.Swap(&b);
  }
  inline void Swap(OptContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptContext* New() const final {
    return CreateMaybeMessage<OptContext>(nullptr);
  }

  OptContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptContext& from);
  void MergeFrom(const OptContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptContext";
  }
  protected:
  explicit OptContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUserIdFieldNumber = 1,
    kMModelIdFieldNumber = 2,
  };
  // string m_userId = 1;
  void clear_m_userid();
  const std::string& m_userid() const;
  void set_m_userid(const std::string& value);
  void set_m_userid(std::string&& value);
  void set_m_userid(const char* value);
  void set_m_userid(const char* value, size_t size);
  std::string* mutable_m_userid();
  std::string* release_m_userid();
  void set_allocated_m_userid(std::string* m_userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_userid(
      std::string* m_userid);
  private:
  const std::string& _internal_m_userid() const;
  void _internal_set_m_userid(const std::string& value);
  std::string* _internal_mutable_m_userid();
  public:

  // string m_modelId = 2;
  void clear_m_modelid();
  const std::string& m_modelid() const;
  void set_m_modelid(const std::string& value);
  void set_m_modelid(std::string&& value);
  void set_m_modelid(const char* value);
  void set_m_modelid(const char* value, size_t size);
  std::string* mutable_m_modelid();
  std::string* release_m_modelid();
  void set_allocated_m_modelid(std::string* m_modelid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_modelid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_modelid(
      std::string* m_modelid);
  private:
  const std::string& _internal_m_modelid() const;
  void _internal_set_m_modelid(const std::string& value);
  std::string* _internal_mutable_m_modelid();
  public:

  // @@protoc_insertion_point(class_scope:OptContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_modelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Addr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Addr) */ {
 public:
  inline Addr() : Addr(nullptr) {};
  virtual ~Addr();

  Addr(const Addr& from);
  Addr(Addr&& from) noexcept
    : Addr() {
    *this = ::std::move(from);
  }

  inline Addr& operator=(const Addr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addr& operator=(Addr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Addr* internal_default_instance() {
    return reinterpret_cast<const Addr*>(
               &_Addr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Addr& a, Addr& b) {
    a.Swap(&b);
  }
  inline void Swap(Addr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addr* New() const final {
    return CreateMaybeMessage<Addr>(nullptr);
  }

  Addr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addr& from);
  void MergeFrom(const Addr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Addr";
  }
  protected:
  explicit Addr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvinceFieldNumber = 1,
    kCityFieldNumber = 2,
    kStreetFieldNumber = 3,
    kRoadFieldNumber = 4,
    kNoFieldNumber = 5,
  };
  // string province = 1;
  void clear_province();
  const std::string& province() const;
  void set_province(const std::string& value);
  void set_province(std::string&& value);
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  std::string* mutable_province();
  std::string* release_province();
  void set_allocated_province(std::string* province);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_province();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_province(
      std::string* province);
  private:
  const std::string& _internal_province() const;
  void _internal_set_province(const std::string& value);
  std::string* _internal_mutable_province();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string street = 3;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_street();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_street(
      std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string road = 4;
  void clear_road();
  const std::string& road() const;
  void set_road(const std::string& value);
  void set_road(std::string&& value);
  void set_road(const char* value);
  void set_road(const char* value, size_t size);
  std::string* mutable_road();
  std::string* release_road();
  void set_allocated_road(std::string* road);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_road();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_road(
      std::string* road);
  private:
  const std::string& _internal_road() const;
  void _internal_set_road(const std::string& value);
  std::string* _internal_mutable_road();
  public:

  // int32 no = 5;
  void clear_no();
  ::PROTOBUF_NAMESPACE_ID::int32 no() const;
  void set_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no() const;
  void _internal_set_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Addr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr road_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Bank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Bank) */ {
 public:
  inline Bank() : Bank(nullptr) {};
  virtual ~Bank();

  Bank(const Bank& from);
  Bank(Bank&& from) noexcept
    : Bank() {
    *this = ::std::move(from);
  }

  inline Bank& operator=(const Bank& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bank& operator=(Bank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bank* internal_default_instance() {
    return reinterpret_cast<const Bank*>(
               &_Bank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bank& a, Bank& b) {
    a.Swap(&b);
  }
  inline void Swap(Bank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bank* New() const final {
    return CreateMaybeMessage<Bank>(nullptr);
  }

  Bank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bank& from);
  void MergeFrom(const Bank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bank";
  }
  protected:
  explicit Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddrFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Addr addr = 2;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const ::Addr& addr() const;
  ::Addr* release_addr();
  ::Addr* mutable_addr();
  void set_allocated_addr(::Addr* addr);
  private:
  const ::Addr& _internal_addr() const;
  ::Addr* _internal_mutable_addr();
  public:
  void unsafe_arena_set_allocated_addr(
      ::Addr* addr);
  ::Addr* unsafe_arena_release_addr();

  // @@protoc_insertion_point(class_scope:Bank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Addr* addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Account) */ {
 public:
  inline Account() : Account(nullptr) {};
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankFieldNumber = 4,
    kIdFieldNumber = 1,
    kAmtFieldNumber = 2,
    kOpenTsFieldNumber = 3,
  };
  // .Bank bank = 4;
  bool has_bank() const;
  private:
  bool _internal_has_bank() const;
  public:
  void clear_bank();
  const ::Bank& bank() const;
  ::Bank* release_bank();
  ::Bank* mutable_bank();
  void set_allocated_bank(::Bank* bank);
  private:
  const ::Bank& _internal_bank() const;
  ::Bank* _internal_mutable_bank();
  public:
  void unsafe_arena_set_allocated_bank(
      ::Bank* bank);
  ::Bank* unsafe_arena_release_bank();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amt = 2;
  void clear_amt();
  ::PROTOBUF_NAMESPACE_ID::int32 amt() const;
  void set_amt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amt() const;
  void _internal_set_amt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 open_ts = 3;
  void clear_open_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 open_ts() const;
  void set_open_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_open_ts() const;
  void _internal_set_open_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Bank* bank_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 amt_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {};
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccsFieldNumber = 5,
    kNameFieldNumber = 2,
    kAddrFieldNumber = 4,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 3,
  };
  // repeated .Account accs = 5;
  int accs_size() const;
  private:
  int _internal_accs_size() const;
  public:
  void clear_accs();
  ::Account* mutable_accs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Account >*
      mutable_accs();
  private:
  const ::Account& _internal_accs(int index) const;
  ::Account* _internal_add_accs();
  public:
  const ::Account& accs(int index) const;
  ::Account* add_accs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Account >&
      accs() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Addr addr = 4;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const ::Addr& addr() const;
  ::Addr* release_addr();
  ::Addr* mutable_addr();
  void set_allocated_addr(::Addr* addr);
  private:
  const ::Addr& _internal_addr() const;
  ::Addr* _internal_mutable_addr();
  public:
  void unsafe_arena_set_allocated_addr(
      ::Addr* addr);
  ::Addr* unsafe_arena_release_addr();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Account > accs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Addr* addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GetPersonReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPersonReq) */ {
 public:
  inline GetPersonReq() : GetPersonReq(nullptr) {};
  virtual ~GetPersonReq();

  GetPersonReq(const GetPersonReq& from);
  GetPersonReq(GetPersonReq&& from) noexcept
    : GetPersonReq() {
    *this = ::std::move(from);
  }

  inline GetPersonReq& operator=(const GetPersonReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonReq& operator=(GetPersonReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersonReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersonReq* internal_default_instance() {
    return reinterpret_cast<const GetPersonReq*>(
               &_GetPersonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPersonReq& a, GetPersonReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersonReq* New() const final {
    return CreateMaybeMessage<GetPersonReq>(nullptr);
  }

  GetPersonReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersonReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersonReq& from);
  void MergeFrom(const GetPersonReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPersonReq";
  }
  protected:
  explicit GetPersonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtxFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .OptContext ctx = 1;
  bool has_ctx() const;
  private:
  bool _internal_has_ctx() const;
  public:
  void clear_ctx();
  const ::OptContext& ctx() const;
  ::OptContext* release_ctx();
  ::OptContext* mutable_ctx();
  void set_allocated_ctx(::OptContext* ctx);
  private:
  const ::OptContext& _internal_ctx() const;
  ::OptContext* _internal_mutable_ctx();
  public:
  void unsafe_arena_set_allocated_ctx(
      ::OptContext* ctx);
  ::OptContext* unsafe_arena_release_ctx();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:GetPersonReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OptContext* ctx_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// -------------------------------------------------------------------

class GetPersonRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPersonRsp) */ {
 public:
  inline GetPersonRsp() : GetPersonRsp(nullptr) {};
  virtual ~GetPersonRsp();

  GetPersonRsp(const GetPersonRsp& from);
  GetPersonRsp(GetPersonRsp&& from) noexcept
    : GetPersonRsp() {
    *this = ::std::move(from);
  }

  inline GetPersonRsp& operator=(const GetPersonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonRsp& operator=(GetPersonRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPersonRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPersonRsp* internal_default_instance() {
    return reinterpret_cast<const GetPersonRsp*>(
               &_GetPersonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPersonRsp& a, GetPersonRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPersonRsp* New() const final {
    return CreateMaybeMessage<GetPersonRsp>(nullptr);
  }

  GetPersonRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPersonRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPersonRsp& from);
  void MergeFrom(const GetPersonRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPersonRsp";
  }
  protected:
  explicit GetPersonRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fapi_2eproto);
    return ::descriptor_table_proto_2fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtxFieldNumber = 1,
    kPersonFieldNumber = 2,
  };
  // .OptContext ctx = 1;
  bool has_ctx() const;
  private:
  bool _internal_has_ctx() const;
  public:
  void clear_ctx();
  const ::OptContext& ctx() const;
  ::OptContext* release_ctx();
  ::OptContext* mutable_ctx();
  void set_allocated_ctx(::OptContext* ctx);
  private:
  const ::OptContext& _internal_ctx() const;
  ::OptContext* _internal_mutable_ctx();
  public:
  void unsafe_arena_set_allocated_ctx(
      ::OptContext* ctx);
  ::OptContext* unsafe_arena_release_ctx();

  // .Person person = 2;
  bool has_person() const;
  private:
  bool _internal_has_person() const;
  public:
  void clear_person();
  const ::Person& person() const;
  ::Person* release_person();
  ::Person* mutable_person();
  void set_allocated_person(::Person* person);
  private:
  const ::Person& _internal_person() const;
  ::Person* _internal_mutable_person();
  public:
  void unsafe_arena_set_allocated_person(
      ::Person* person);
  ::Person* unsafe_arena_release_person();

  // @@protoc_insertion_point(class_scope:GetPersonRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OptContext* ctx_;
  ::Person* person_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptContext

// string m_userId = 1;
inline void OptContext::clear_m_userid() {
  m_userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OptContext::m_userid() const {
  // @@protoc_insertion_point(field_get:OptContext.m_userId)
  return _internal_m_userid();
}
inline void OptContext::set_m_userid(const std::string& value) {
  _internal_set_m_userid(value);
  // @@protoc_insertion_point(field_set:OptContext.m_userId)
}
inline std::string* OptContext::mutable_m_userid() {
  // @@protoc_insertion_point(field_mutable:OptContext.m_userId)
  return _internal_mutable_m_userid();
}
inline const std::string& OptContext::_internal_m_userid() const {
  return m_userid_.Get();
}
inline void OptContext::_internal_set_m_userid(const std::string& value) {
  
  m_userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptContext::set_m_userid(std::string&& value) {
  
  m_userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OptContext.m_userId)
}
inline void OptContext::set_m_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  m_userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OptContext.m_userId)
}
inline void OptContext::set_m_userid(const char* value,
    size_t size) {
  
  m_userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OptContext.m_userId)
}
inline std::string* OptContext::_internal_mutable_m_userid() {
  
  return m_userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptContext::release_m_userid() {
  // @@protoc_insertion_point(field_release:OptContext.m_userId)
  return m_userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptContext::set_allocated_m_userid(std::string* m_userid) {
  if (m_userid != nullptr) {
    
  } else {
    
  }
  m_userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OptContext.m_userId)
}
inline std::string* OptContext::unsafe_arena_release_m_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OptContext.m_userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return m_userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptContext::unsafe_arena_set_allocated_m_userid(
    std::string* m_userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_userid != nullptr) {
    
  } else {
    
  }
  m_userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OptContext.m_userId)
}

// string m_modelId = 2;
inline void OptContext::clear_m_modelid() {
  m_modelid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OptContext::m_modelid() const {
  // @@protoc_insertion_point(field_get:OptContext.m_modelId)
  return _internal_m_modelid();
}
inline void OptContext::set_m_modelid(const std::string& value) {
  _internal_set_m_modelid(value);
  // @@protoc_insertion_point(field_set:OptContext.m_modelId)
}
inline std::string* OptContext::mutable_m_modelid() {
  // @@protoc_insertion_point(field_mutable:OptContext.m_modelId)
  return _internal_mutable_m_modelid();
}
inline const std::string& OptContext::_internal_m_modelid() const {
  return m_modelid_.Get();
}
inline void OptContext::_internal_set_m_modelid(const std::string& value) {
  
  m_modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptContext::set_m_modelid(std::string&& value) {
  
  m_modelid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OptContext.m_modelId)
}
inline void OptContext::set_m_modelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  m_modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OptContext.m_modelId)
}
inline void OptContext::set_m_modelid(const char* value,
    size_t size) {
  
  m_modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OptContext.m_modelId)
}
inline std::string* OptContext::_internal_mutable_m_modelid() {
  
  return m_modelid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptContext::release_m_modelid() {
  // @@protoc_insertion_point(field_release:OptContext.m_modelId)
  return m_modelid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptContext::set_allocated_m_modelid(std::string* m_modelid) {
  if (m_modelid != nullptr) {
    
  } else {
    
  }
  m_modelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_modelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OptContext.m_modelId)
}
inline std::string* OptContext::unsafe_arena_release_m_modelid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OptContext.m_modelId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return m_modelid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OptContext::unsafe_arena_set_allocated_m_modelid(
    std::string* m_modelid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_modelid != nullptr) {
    
  } else {
    
  }
  m_modelid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_modelid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OptContext.m_modelId)
}

// -------------------------------------------------------------------

// Addr

// string province = 1;
inline void Addr::clear_province() {
  province_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addr::province() const {
  // @@protoc_insertion_point(field_get:Addr.province)
  return _internal_province();
}
inline void Addr::set_province(const std::string& value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:Addr.province)
}
inline std::string* Addr::mutable_province() {
  // @@protoc_insertion_point(field_mutable:Addr.province)
  return _internal_mutable_province();
}
inline const std::string& Addr::_internal_province() const {
  return province_.Get();
}
inline void Addr::_internal_set_province(const std::string& value) {
  
  province_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addr::set_province(std::string&& value) {
  
  province_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Addr.province)
}
inline void Addr::set_province(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  province_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Addr.province)
}
inline void Addr::set_province(const char* value,
    size_t size) {
  
  province_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Addr.province)
}
inline std::string* Addr::_internal_mutable_province() {
  
  return province_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addr::release_province() {
  // @@protoc_insertion_point(field_release:Addr.province)
  return province_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addr::set_allocated_province(std::string* province) {
  if (province != nullptr) {
    
  } else {
    
  }
  province_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), province,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Addr.province)
}
inline std::string* Addr::unsafe_arena_release_province() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Addr.province)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return province_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addr::unsafe_arena_set_allocated_province(
    std::string* province) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (province != nullptr) {
    
  } else {
    
  }
  province_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      province, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Addr.province)
}

// string city = 2;
inline void Addr::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addr::city() const {
  // @@protoc_insertion_point(field_get:Addr.city)
  return _internal_city();
}
inline void Addr::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Addr.city)
}
inline std::string* Addr::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Addr.city)
  return _internal_mutable_city();
}
inline const std::string& Addr::_internal_city() const {
  return city_.Get();
}
inline void Addr::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addr::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Addr.city)
}
inline void Addr::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Addr.city)
}
inline void Addr::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Addr.city)
}
inline std::string* Addr::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addr::release_city() {
  // @@protoc_insertion_point(field_release:Addr.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addr::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Addr.city)
}
inline std::string* Addr::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Addr.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addr::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Addr.city)
}

// string street = 3;
inline void Addr::clear_street() {
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addr::street() const {
  // @@protoc_insertion_point(field_get:Addr.street)
  return _internal_street();
}
inline void Addr::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:Addr.street)
}
inline std::string* Addr::mutable_street() {
  // @@protoc_insertion_point(field_mutable:Addr.street)
  return _internal_mutable_street();
}
inline const std::string& Addr::_internal_street() const {
  return street_.Get();
}
inline void Addr::_internal_set_street(const std::string& value) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addr::set_street(std::string&& value) {
  
  street_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Addr.street)
}
inline void Addr::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Addr.street)
}
inline void Addr::set_street(const char* value,
    size_t size) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Addr.street)
}
inline std::string* Addr::_internal_mutable_street() {
  
  return street_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addr::release_street() {
  // @@protoc_insertion_point(field_release:Addr.street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addr::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Addr.street)
}
inline std::string* Addr::unsafe_arena_release_street() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Addr.street)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return street_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addr::unsafe_arena_set_allocated_street(
    std::string* street) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (street != nullptr) {
    
  } else {
    
  }
  street_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      street, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Addr.street)
}

// string road = 4;
inline void Addr::clear_road() {
  road_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addr::road() const {
  // @@protoc_insertion_point(field_get:Addr.road)
  return _internal_road();
}
inline void Addr::set_road(const std::string& value) {
  _internal_set_road(value);
  // @@protoc_insertion_point(field_set:Addr.road)
}
inline std::string* Addr::mutable_road() {
  // @@protoc_insertion_point(field_mutable:Addr.road)
  return _internal_mutable_road();
}
inline const std::string& Addr::_internal_road() const {
  return road_.Get();
}
inline void Addr::_internal_set_road(const std::string& value) {
  
  road_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addr::set_road(std::string&& value) {
  
  road_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Addr.road)
}
inline void Addr::set_road(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  road_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Addr.road)
}
inline void Addr::set_road(const char* value,
    size_t size) {
  
  road_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Addr.road)
}
inline std::string* Addr::_internal_mutable_road() {
  
  return road_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addr::release_road() {
  // @@protoc_insertion_point(field_release:Addr.road)
  return road_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addr::set_allocated_road(std::string* road) {
  if (road != nullptr) {
    
  } else {
    
  }
  road_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), road,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Addr.road)
}
inline std::string* Addr::unsafe_arena_release_road() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Addr.road)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return road_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addr::unsafe_arena_set_allocated_road(
    std::string* road) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (road != nullptr) {
    
  } else {
    
  }
  road_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      road, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Addr.road)
}

// int32 no = 5;
inline void Addr::clear_no() {
  no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addr::_internal_no() const {
  return no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Addr::no() const {
  // @@protoc_insertion_point(field_get:Addr.no)
  return _internal_no();
}
inline void Addr::_internal_set_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  no_ = value;
}
inline void Addr::set_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no(value);
  // @@protoc_insertion_point(field_set:Addr.no)
}

// -------------------------------------------------------------------

// Bank

// string name = 1;
inline void Bank::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bank::name() const {
  // @@protoc_insertion_point(field_get:Bank.name)
  return _internal_name();
}
inline void Bank::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Bank.name)
}
inline std::string* Bank::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Bank.name)
  return _internal_mutable_name();
}
inline const std::string& Bank::_internal_name() const {
  return name_.Get();
}
inline void Bank::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bank::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Bank.name)
}
inline void Bank::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Bank.name)
}
inline void Bank::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Bank.name)
}
inline std::string* Bank::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bank::release_name() {
  // @@protoc_insertion_point(field_release:Bank.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bank::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Bank.name)
}
inline std::string* Bank::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Bank.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Bank::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bank.name)
}

// .Addr addr = 2;
inline bool Bank::_internal_has_addr() const {
  return this != internal_default_instance() && addr_ != nullptr;
}
inline bool Bank::has_addr() const {
  return _internal_has_addr();
}
inline void Bank::clear_addr() {
  if (GetArena() == nullptr && addr_ != nullptr) {
    delete addr_;
  }
  addr_ = nullptr;
}
inline const ::Addr& Bank::_internal_addr() const {
  const ::Addr* p = addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Addr*>(
      &::_Addr_default_instance_);
}
inline const ::Addr& Bank::addr() const {
  // @@protoc_insertion_point(field_get:Bank.addr)
  return _internal_addr();
}
inline void Bank::unsafe_arena_set_allocated_addr(
    ::Addr* addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addr_);
  }
  addr_ = addr;
  if (addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Bank.addr)
}
inline ::Addr* Bank::release_addr() {
  auto temp = unsafe_arena_release_addr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Addr* Bank::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_release:Bank.addr)
  
  ::Addr* temp = addr_;
  addr_ = nullptr;
  return temp;
}
inline ::Addr* Bank::_internal_mutable_addr() {
  
  if (addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Addr>(GetArena());
    addr_ = p;
  }
  return addr_;
}
inline ::Addr* Bank::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:Bank.addr)
  return _internal_mutable_addr();
}
inline void Bank::set_allocated_addr(::Addr* addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete addr_;
  }
  if (addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addr);
    if (message_arena != submessage_arena) {
      addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    
  } else {
    
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:Bank.addr)
}

// -------------------------------------------------------------------

// Account

// int32 id = 1;
inline void Account::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::id() const {
  // @@protoc_insertion_point(field_get:Account.id)
  return _internal_id();
}
inline void Account::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Account::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Account.id)
}

// int32 amt = 2;
inline void Account::clear_amt() {
  amt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::_internal_amt() const {
  return amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Account::amt() const {
  // @@protoc_insertion_point(field_get:Account.amt)
  return _internal_amt();
}
inline void Account::_internal_set_amt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amt_ = value;
}
inline void Account::set_amt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:Account.amt)
}

// int64 open_ts = 3;
inline void Account::clear_open_ts() {
  open_ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::_internal_open_ts() const {
  return open_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::open_ts() const {
  // @@protoc_insertion_point(field_get:Account.open_ts)
  return _internal_open_ts();
}
inline void Account::_internal_set_open_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  open_ts_ = value;
}
inline void Account::set_open_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_open_ts(value);
  // @@protoc_insertion_point(field_set:Account.open_ts)
}

// .Bank bank = 4;
inline bool Account::_internal_has_bank() const {
  return this != internal_default_instance() && bank_ != nullptr;
}
inline bool Account::has_bank() const {
  return _internal_has_bank();
}
inline void Account::clear_bank() {
  if (GetArena() == nullptr && bank_ != nullptr) {
    delete bank_;
  }
  bank_ = nullptr;
}
inline const ::Bank& Account::_internal_bank() const {
  const ::Bank* p = bank_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Bank*>(
      &::_Bank_default_instance_);
}
inline const ::Bank& Account::bank() const {
  // @@protoc_insertion_point(field_get:Account.bank)
  return _internal_bank();
}
inline void Account::unsafe_arena_set_allocated_bank(
    ::Bank* bank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bank_);
  }
  bank_ = bank;
  if (bank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Account.bank)
}
inline ::Bank* Account::release_bank() {
  auto temp = unsafe_arena_release_bank();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Bank* Account::unsafe_arena_release_bank() {
  // @@protoc_insertion_point(field_release:Account.bank)
  
  ::Bank* temp = bank_;
  bank_ = nullptr;
  return temp;
}
inline ::Bank* Account::_internal_mutable_bank() {
  
  if (bank_ == nullptr) {
    auto* p = CreateMaybeMessage<::Bank>(GetArena());
    bank_ = p;
  }
  return bank_;
}
inline ::Bank* Account::mutable_bank() {
  // @@protoc_insertion_point(field_mutable:Account.bank)
  return _internal_mutable_bank();
}
inline void Account::set_allocated_bank(::Bank* bank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bank_;
  }
  if (bank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bank);
    if (message_arena != submessage_arena) {
      bank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bank, submessage_arena);
    }
    
  } else {
    
  }
  bank_ = bank;
  // @@protoc_insertion_point(field_set_allocated:Account.bank)
}

// -------------------------------------------------------------------

// Person

// int64 id = 1;
inline void Person::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Person::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Person::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Person.id)
}

// string name = 2;
inline void Person::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.name)
  return _internal_name();
}
inline void Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Person.name)
}
inline std::string* Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Person.name)
  return _internal_mutable_name();
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Person.name)
}
inline void Person::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.name)
}
inline std::string* Person::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.name)
}
inline std::string* Person::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Person.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Person::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Person.name)
}

// int32 age = 3;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Person.age)
  return _internal_age();
}
inline void Person::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Person::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Person.age)
}

// .Addr addr = 4;
inline bool Person::_internal_has_addr() const {
  return this != internal_default_instance() && addr_ != nullptr;
}
inline bool Person::has_addr() const {
  return _internal_has_addr();
}
inline void Person::clear_addr() {
  if (GetArena() == nullptr && addr_ != nullptr) {
    delete addr_;
  }
  addr_ = nullptr;
}
inline const ::Addr& Person::_internal_addr() const {
  const ::Addr* p = addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Addr*>(
      &::_Addr_default_instance_);
}
inline const ::Addr& Person::addr() const {
  // @@protoc_insertion_point(field_get:Person.addr)
  return _internal_addr();
}
inline void Person::unsafe_arena_set_allocated_addr(
    ::Addr* addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addr_);
  }
  addr_ = addr;
  if (addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Person.addr)
}
inline ::Addr* Person::release_addr() {
  auto temp = unsafe_arena_release_addr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Addr* Person::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_release:Person.addr)
  
  ::Addr* temp = addr_;
  addr_ = nullptr;
  return temp;
}
inline ::Addr* Person::_internal_mutable_addr() {
  
  if (addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Addr>(GetArena());
    addr_ = p;
  }
  return addr_;
}
inline ::Addr* Person::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:Person.addr)
  return _internal_mutable_addr();
}
inline void Person::set_allocated_addr(::Addr* addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete addr_;
  }
  if (addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addr);
    if (message_arena != submessage_arena) {
      addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    
  } else {
    
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:Person.addr)
}

// repeated .Account accs = 5;
inline int Person::_internal_accs_size() const {
  return accs_.size();
}
inline int Person::accs_size() const {
  return _internal_accs_size();
}
inline void Person::clear_accs() {
  accs_.Clear();
}
inline ::Account* Person::mutable_accs(int index) {
  // @@protoc_insertion_point(field_mutable:Person.accs)
  return accs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Account >*
Person::mutable_accs() {
  // @@protoc_insertion_point(field_mutable_list:Person.accs)
  return &accs_;
}
inline const ::Account& Person::_internal_accs(int index) const {
  return accs_.Get(index);
}
inline const ::Account& Person::accs(int index) const {
  // @@protoc_insertion_point(field_get:Person.accs)
  return _internal_accs(index);
}
inline ::Account* Person::_internal_add_accs() {
  return accs_.Add();
}
inline ::Account* Person::add_accs() {
  // @@protoc_insertion_point(field_add:Person.accs)
  return _internal_add_accs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Account >&
Person::accs() const {
  // @@protoc_insertion_point(field_list:Person.accs)
  return accs_;
}

// -------------------------------------------------------------------

// GetPersonReq

// .OptContext ctx = 1;
inline bool GetPersonReq::_internal_has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline bool GetPersonReq::has_ctx() const {
  return _internal_has_ctx();
}
inline void GetPersonReq::clear_ctx() {
  if (GetArena() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::OptContext& GetPersonReq::_internal_ctx() const {
  const ::OptContext* p = ctx_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OptContext*>(
      &::_OptContext_default_instance_);
}
inline const ::OptContext& GetPersonReq::ctx() const {
  // @@protoc_insertion_point(field_get:GetPersonReq.ctx)
  return _internal_ctx();
}
inline void GetPersonReq::unsafe_arena_set_allocated_ctx(
    ::OptContext* ctx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctx_);
  }
  ctx_ = ctx;
  if (ctx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetPersonReq.ctx)
}
inline ::OptContext* GetPersonReq::release_ctx() {
  auto temp = unsafe_arena_release_ctx();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OptContext* GetPersonReq::unsafe_arena_release_ctx() {
  // @@protoc_insertion_point(field_release:GetPersonReq.ctx)
  
  ::OptContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::OptContext* GetPersonReq::_internal_mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::OptContext>(GetArena());
    ctx_ = p;
  }
  return ctx_;
}
inline ::OptContext* GetPersonReq::mutable_ctx() {
  // @@protoc_insertion_point(field_mutable:GetPersonReq.ctx)
  return _internal_mutable_ctx();
}
inline void GetPersonReq::set_allocated_ctx(::OptContext* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ctx);
    if (message_arena != submessage_arena) {
      ctx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:GetPersonReq.ctx)
}

// int64 id = 2;
inline void GetPersonReq::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPersonReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPersonReq::id() const {
  // @@protoc_insertion_point(field_get:GetPersonReq.id)
  return _internal_id();
}
inline void GetPersonReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetPersonReq::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GetPersonReq.id)
}

// -------------------------------------------------------------------

// GetPersonRsp

// .OptContext ctx = 1;
inline bool GetPersonRsp::_internal_has_ctx() const {
  return this != internal_default_instance() && ctx_ != nullptr;
}
inline bool GetPersonRsp::has_ctx() const {
  return _internal_has_ctx();
}
inline void GetPersonRsp::clear_ctx() {
  if (GetArena() == nullptr && ctx_ != nullptr) {
    delete ctx_;
  }
  ctx_ = nullptr;
}
inline const ::OptContext& GetPersonRsp::_internal_ctx() const {
  const ::OptContext* p = ctx_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OptContext*>(
      &::_OptContext_default_instance_);
}
inline const ::OptContext& GetPersonRsp::ctx() const {
  // @@protoc_insertion_point(field_get:GetPersonRsp.ctx)
  return _internal_ctx();
}
inline void GetPersonRsp::unsafe_arena_set_allocated_ctx(
    ::OptContext* ctx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctx_);
  }
  ctx_ = ctx;
  if (ctx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetPersonRsp.ctx)
}
inline ::OptContext* GetPersonRsp::release_ctx() {
  auto temp = unsafe_arena_release_ctx();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OptContext* GetPersonRsp::unsafe_arena_release_ctx() {
  // @@protoc_insertion_point(field_release:GetPersonRsp.ctx)
  
  ::OptContext* temp = ctx_;
  ctx_ = nullptr;
  return temp;
}
inline ::OptContext* GetPersonRsp::_internal_mutable_ctx() {
  
  if (ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::OptContext>(GetArena());
    ctx_ = p;
  }
  return ctx_;
}
inline ::OptContext* GetPersonRsp::mutable_ctx() {
  // @@protoc_insertion_point(field_mutable:GetPersonRsp.ctx)
  return _internal_mutable_ctx();
}
inline void GetPersonRsp::set_allocated_ctx(::OptContext* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ctx_;
  }
  if (ctx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ctx);
    if (message_arena != submessage_arena) {
      ctx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    
  } else {
    
  }
  ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:GetPersonRsp.ctx)
}

// .Person person = 2;
inline bool GetPersonRsp::_internal_has_person() const {
  return this != internal_default_instance() && person_ != nullptr;
}
inline bool GetPersonRsp::has_person() const {
  return _internal_has_person();
}
inline void GetPersonRsp::clear_person() {
  if (GetArena() == nullptr && person_ != nullptr) {
    delete person_;
  }
  person_ = nullptr;
}
inline const ::Person& GetPersonRsp::_internal_person() const {
  const ::Person* p = person_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Person*>(
      &::_Person_default_instance_);
}
inline const ::Person& GetPersonRsp::person() const {
  // @@protoc_insertion_point(field_get:GetPersonRsp.person)
  return _internal_person();
}
inline void GetPersonRsp::unsafe_arena_set_allocated_person(
    ::Person* person) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(person_);
  }
  person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetPersonRsp.person)
}
inline ::Person* GetPersonRsp::release_person() {
  auto temp = unsafe_arena_release_person();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Person* GetPersonRsp::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_release:GetPersonRsp.person)
  
  ::Person* temp = person_;
  person_ = nullptr;
  return temp;
}
inline ::Person* GetPersonRsp::_internal_mutable_person() {
  
  if (person_ == nullptr) {
    auto* p = CreateMaybeMessage<::Person>(GetArena());
    person_ = p;
  }
  return person_;
}
inline ::Person* GetPersonRsp::mutable_person() {
  // @@protoc_insertion_point(field_mutable:GetPersonRsp.person)
  return _internal_mutable_person();
}
inline void GetPersonRsp::set_allocated_person(::Person* person) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete person_;
  }
  if (person) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(person);
    if (message_arena != submessage_arena) {
      person = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    
  } else {
    
  }
  person_ = person;
  // @@protoc_insertion_point(field_set_allocated:GetPersonRsp.person)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fapi_2eproto
